datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userName    String       @unique
  name        String
  email       String       @unique
  phone       String?
  password    String
  role        String       @default("User")
  avatar      String?
  fundraisers Fundraiser[]
  dateJoined  DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  donations   Donation[]
  reports     Report[]
  Bank        Bank[]
}

model Fundraiser {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  title               String        @unique
  slug                String?       @unique
  description         String
  goal                String
  category            String
  type                String
  photo               Json
  totalDonationAmount Int?          @default(0)
  progress            Int?          @default(0)
  status              String        @default("Draft")
  beneficiary         Beneficiary[]
  donations           Donation[]
  reports             Report[]
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String        @db.ObjectId
  dateRequested       DateTime      @default(now())
  datePublished       DateTime      @default(now())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Beneficiary {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  address      Json
  phone        String
  fundraiser   Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  fundraiserId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Donation {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  transactionDetails Json
  donationAmount     Int
  serviceCharge      Int
  totalAmount        Int
  paymentMethod      String
  fundraiser         Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  fundraiserId       String     @db.ObjectId
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String     @db.ObjectId
  dateDonated        DateTime   @default(now())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Khaltipayment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  pidx           String   @unique
  donorId        String
  fundraiserId   String
  fundraiserSlug String
  donationAmount Int
  serviceCharge  Int
  totalAmount    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Esewapayment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  signature      String   @unique
  donorId        String
  fundraiserId   String
  fundraiserSlug String
  donationAmount Int
  serviceCharge  Int
  totalAmount    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Report {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  causes       String[]
  fundraiser   Fundraiser @relation(fields: [fundraiserId], references: [id], onDelete: Cascade)
  fundraiserId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @db.ObjectId
  dateReported DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Bank {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  holderName    String
  accountNumber String
  mobileNumber  String
  bankName      String
  status        String   @default("Pending")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.ObjectId
  dateAdded     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String
  email     String   @unique
  used      Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
